{
	"information_for_contributors": [
		"This file has been converted from https://github.com/PowerShell/EditorSyntax/blob/master/PowerShellSyntax.tmLanguage",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "altered from https://github.com/PowerShell/EditorSyntax/commit/472c9447da4e3160bef211d5e1a0c2dee3cce497",
	"name": "PowerShell",
	"scopeName": "source.powershell",
	"injections": {
		"L:punctuation.accessor.powershell": {
			"patterns": [
				{
					"include": "#accessors"
				}
			]
		}
	},
	"patterns": [
		{
			"include": "#commentBlock"
		},
		{
			"match": "[2-6]>&1|>>|>|<<|<|>|>\\||[1-6]>|[1-6]>>",
			"name": "keyword.operator.redirection.powershell"
		},
		{
			"include": "#commands"
		},
		{
			"include": "#commentLine"
		},
		{
			"include": "#variable"
		},
		{
			"include": "#interpolatedStringContent"
		},
		{
			"include": "#function"
		},
		{
			"include": "#attribute"
		},
		{
			"include": "#UsingDirective"
		},
		{
			"include": "#type"
		},
		{
			"include": "#hashtable"
		},
		{
			"include": "#scriptblock"
		},
		{
			"comment": "Needed to parse stuff correctly in 'argument mode'. (See about_parsing.)",
			"include": "#argumentModeEscapes"
		},
		{
			"include": "#quotedStrings_Members"
		},
		{
			"include": "#numericConstant"
		},
		{
			"begin": "(?=@\\()",
			"end": "(?!.\\G)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"begin": "(@)(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.array.begin.powershell"
						},
						"2": {
							"name": "punctuation.section.group.begin.powershell"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.group.end.powershell"
						}
					},
					"name": "meta.group.array-expression.powershell",
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "(?<=\\))(?=\\.(?!\\.)|::|\\[)",
					"end": "(?=[^\\s\\p{L}]|\\n)",
					"applyEndPatternLast": true,
					"patterns": [
						{
							"include": "#accessors"
						},
						{
							"include": "#commentLine"
						},
						{
							"include": "#commentBlock"
						},
						{
							"match": "[^\\s\\W]+"
						}
					]
				}
			]
		},
		{
			"include": "#interpolation"
		},
		{
			"match": "(\\b(([\\p{L}0-9_\\.!%^&+=][\\p{L}0-9_\\.!@#%^&+=-]*)\\.(?i:exe|com|cmd|bat))\\b)",
			"name": "support.function.powershell"
		},
		{
			"match": "(?<!\\w|-|\\.)((?i:begin|break|catch|continue|data|default|define|do|dynamicparam|else|elseif|end|exit|finally|for|from|if|in|inlinescript|parallel|param|process|return|sequence|switch|throw|trap|try|until|var|while)\\b(?![\\/.-]))",
			"name": "keyword.control.powershell"
		},
		{
			"match": "(?<!\\w|-|[^\\)]\\.)((?i:(foreach|where)\\b(?![\\/.-])))",
			"name": "keyword.control.powershell"
		},
		{
			"begin": "(?<!\\w)(--%)(?!\\w)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.powershell"
				}
			},
			"end": "$|(?=\\|)",
			"patterns": [
				{
					"match": "[^\"\\x{201C}-\\x{201E}]+?",
					"name": "string.unquoted.powershell"
				},
				{
					"begin": "(?:[\"\\x{201C}-\\x{201E}])",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.powershell"
						}
					},
					"end": "(?:[\"\\x{201C}-\\x{201E}])|$",
					"applyEndPatternLast": true,
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.powershell"
						}
					},
					"name": "string.quoted.double.powershell"
				}
			],
			"comment": "This should be moved to the repository at some point."
		},
		{
			"begin": "(?<![\\w-])((?i:class))(?=\\s)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.class.powershell"
				}
			},
			"end": "(?=[^\\s])|(?<=})",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"begin": "(?<![\\w-])([\\p{L}_]\\w*)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.class.powershell"
						}
					},
					"end": "(?=[^\\s])|(?<=})",
					"applyEndPatternLast": true,
					"patterns": [
						{
							"begin": ":",
							"beginCaptures": {
								"0": {
									"name": "punctuation.separator.colon.powershell"
								}
							},
							"end": "(?=[^\\s:])|(?<=})",
							"applyEndPatternLast": true,
							"patterns": [
								{
									"begin": "(?<![\\w-])([\\p{L}_]\\w*(?:\\.\\g<1>?)?)",
									"beginCaptures": {
										"0": {
											"patterns": [
												{
													"include": "#type_keywords"
												},
												{
													"match": "[^\\.]+",
													"name": "entity.other.inherited-class.powershell"
												},
												{
													"match": "\\.",
													"name": "punctuation.accessor.type.powershell"
												}
											]
										}
									},
									"end": "(?=[^\\s])|(?<=})",
									"applyEndPatternLast": true,
									"patterns": [
										{
											"begin": ",",
											"beginCaptures": {
												"0": {
													"name": "punctuation.separator.comma.powershell"
												}
											},
											"end": "(?=[^\\s:])|(?<=})",
											"applyEndPatternLast": true,
											"patterns": [
												{
													"begin": "(?<![\\w-])([\\p{L}_]\\w*(?:\\.\\g<1>?)?)",
													"beginCaptures": {
														"0": {
															"patterns": [
																{
																	"include": "#type_keywords"
																},
																{
																	"match": "[^\\.]+",
																	"name": "entity.other.inherited-class.powershell"
																},
																{
																	"match": "\\.",
																	"name": "punctuation.accessor.type.powershell"
																}
															]
														}
													},
													"end": "(?=[^\\s])|(?<=})",
													"applyEndPatternLast": true,
													"patterns": [
														{
															"include": "#commentBlock"
														},
														{
															"include": "#commentLine"
														},
														{
															"match": "(?<!})[^\\s{},]+"
														}
													]
												},
												{
													"include": "#commentBlock"
												},
												{
													"include": "#commentLine"
												}
											]
										},
										{
											"include": "#commentBlock"
										},
										{
											"include": "#commentLine"
										},
										{
											"match": "(?<!})[^\\s{},]+"
										}
									]
								},
								{
									"include": "#commentBlock"
								},
								{
									"include": "#commentLine"
								}
							]
						},
						{
							"include": "#commentBlock"
						},
						{
							"include": "#commentLine"
						},
						{
							"match": "(?<!})[^\\s{}:]+"
						}
					]
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.braces.begin.powershell"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.braces.end.powershell"
						}
					},
					"name": "meta.class.powershell",
					"patterns": [
						{
							"match": "(?<![\\w-])((?i:hidden|static))(?=\\s)",
							"name": "storage.modifier.powershell"
						},
						{
							"begin": "(?<![\\w-])([\\p{L}_]\\w*)(?=\\s*\\()",
							"beginCaptures": {
								"1": {
									"name": "entity.name.function.powershell"
								}
							},
							"end": "(?<=[;}])",
							"name": "meta.method.powershell",
							"patterns": [
								{
									"begin": ":",
									"beginCaptures": {
										"0": {
											"name": "punctuation.separator.colon.powershell"
										}
									},
									"end": "(?=[;{])",
									"patterns": [
										{
											"comment": "(?<![;{])\\s+"
										},
										{
											"begin": "(?i:base)",
											"beginCaptures": {
												"0": {
													"name": "variable.language.super.powershell"
												}
											},
											"end": "(?=[;{])",
											"patterns": [
												{
													"comment": "(?<![;{])\\s+"
												},
												{
													"include": "#invocationParameterSet"
												}
											]
										}
									]
								},
								{
									"include": "#invocationParameterSet"
								},
								{
									"include": "$self"
								}
							]
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"include": "#commentBlock"
				},
				{
					"include": "#commentLine"
				}
			]
		},
		{
			"begin": "(?<![\\w-])((?i:enum))(?=\\s)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.enum.powershell"
				}
			},
			"end": "(?=[^\\s])|(?<=})",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"begin": "(?<![\\w-])([\\p{L}_]\\w*)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.enum.powershell"
						}
					},
					"end": "(?=[^\\s])|(?<=})",
					"applyEndPatternLast": true,
					"patterns": [
						{
							"comment": "optional user specified type, PowerShell Core >= 6.2.0",
							"begin": ":",
							"beginCaptures": {
								"0": {
									"name": "punctuation.separator.colon.powershell"
								}
							},
							"end": "(?=[^\\s:])|(?<=})",
							"applyEndPatternLast": true,
							"patterns": [
								{
									"begin": "(?<![\\w-])([\\p{L}_]\\w*(?:\\.\\g<1>?)?)",
									"beginCaptures": {
										"0": {
											"patterns": [
												{
													"include": "#type_keywords"
												},
												{
													"match": "[^\\.]+",
													"name": "storage.type.powershell"
												},
												{
													"match": "\\.",
													"name": "punctuation.accessor.type.powershell"
												}
											]
										}
									},
									"end": "(?=[^\\s])|(?<=})",
									"applyEndPatternLast": true,
									"patterns": [
										{
											"include": "#commentBlock"
										},
										{
											"include": "#commentLine"
										},
										{
											"match": "(?<!})[^\\s{}]+"
										}
									]
								},
								{
									"include": "#commentBlock"
								},
								{
									"include": "#commentLine"
								}
							]
						},
						{
							"include": "#commentBlock"
						},
						{
							"include": "#commentLine"
						},
						{
							"match": "(?<!})[^\\s{}:]+"
						}
					]
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.braces.begin.powershell"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.braces.end.powershell"
						}
					},
					"name": "meta.enumeration.powershell",
					"patterns": [
						{
							"begin": "(?<![\\w-])([\\p{L}_]\\w*)",
							"beginCaptures": {
								"1": {
									"name": "entity.name.variable.enum-member.powershell"
								}
							},
							"end": "(?=[;}\\n])",
							"patterns": [
								{
									"begin": "=",
									"beginCaptures": {
										"0": {
											"name": "keyword.operator.assignment.enum-member.powershell"
										}
									},
									"end": "(?=[;}\\n])",
									"patterns": [
										{
											"include": "$self"
										}
									]
								},
								{
									"include": "#argumentModeEscapes"
								},
								{
									"include": "#commentBlock"
								},
								{
									"include": "#commentLine"
								}
							]
						},
						{
							"include": "#commentBlock"
						},
						{
							"include": "#commentLine"
						},
						{
							"match": "[^;\\s][^;]+"
						}
					]
				},
				{
					"include": "#argumentModeEscapes"
				},
				{
					"include": "#commentBlock"
				},
				{
					"include": "#commentLine"
				}
			]
		},
		{
			"begin": "(?:(?<!\\w)|\\G)-(?i:is(?:not)?|as)(?!\\p{L})",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.comparison.type.powershell"
				}
			},
			"end": "(?!\\s)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"include": "#commentBlock"
				},
				{
					"include": "#commentLine"
				}
			]
		},
		{
			"begin": "(?:(?<!\\w|!)|\\G)-(?i:[ic]?(?:eq|ne|[gl][te]|(?:not)?(?:like|match|contains|in)|replace))(?!\\p{L})",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.comparison.powershell"
				}
			},
			"end": "(?!\\s)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"include": "#commentBlock"
				},
				{
					"include": "#commentLine"
				}
			]
		},
		{
			"begin": "(?:(?<!\\w|!)|\\G)-(?i:join|split)(?!\\p{L})",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.unary.powershell"
				}
			},
			"end": "(?!\\s)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"include": "#commentBlock"
				},
				{
					"include": "#commentLine"
				}
			]
		},
		{
			"begin": "(?:(?<!\\w|!)|\\G)-(?i:and|or|not|xor)(?!\\p{L})|!",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.logical.powershell"
				}
			},
			"end": "(?!\\s)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"include": "#commentBlock"
				},
				{
					"include": "#commentLine"
				}
			]
		},
		{
			"begin": "(?:(?<!\\w|!)|\\G)-(?i:band|bor|bnot|bxor|shl|shr)(?!\\p{L})",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.bitwise.powershell"
				}
			},
			"end": "(?!\\s)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"include": "#commentBlock"
				},
				{
					"include": "#commentLine"
				}
			]
		},
		{
			"begin": "(?:(?<!\\w|!)|\\G)-(?i:f)(?!\\p{L})",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.string-format.powershell"
				}
			},
			"end": "(?!\\s)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"include": "#commentBlock"
				},
				{
					"include": "#commentLine"
				}
			]
		},
		{
			"match": "(?:(?<!\\w|!)|\\G)-\\p{L}\\w*",
			"name": "entity.name.parameter.powershell"
		},
		{
			"match": "\\+\\+|--",
			"name": "keyword.operator.unary.powershell"
		},
		{
			"begin": "[+%*/-]?=|[+/*%-](?!\\p{L})",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.assignment.powershell"
				}
			},
			"end": "(?!\\s)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"include": "#commentBlock"
				},
				{
					"include": "#commentLine"
				}
			]
		},
		{
			"match": "\\|\\||&&|;",
			"name": "punctuation.terminator.statement.powershell"
		},
		{
			"begin": "&|(?<!\\w|!)(?<!\\.)\\.(?=\\s)|,|\\|",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.other.powershell"
				}
			},
			"end": "(?!\\s)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"include": "#commentBlock"
				},
				{
					"include": "#commentLine"
				}
			]
		},
		{
			"comment": "the range operator is only available after an operand (binary operator)",
			"begin": "(?<!^)\\s*(\\.\\.)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.range.powershell"
				}
			},
			"end": "(?!\\s)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"include": "#commentBlock"
				},
				{
					"include": "#commentLine"
				}
			]
		}
	],
	"repository": {
		"commentBlock": {
			"begin": "<#",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.block.begin.powershell"
				}
			},
			"end": "#>",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.block.end.powershell"
				}
			},
			"name": "comment.block.powershell",
			"patterns": [
				{
					"include": "#commentEmbeddedDocs"
				}
			]
		},
		"commentLine": {
			"begin": "(?:(?<![`\\\\\\w*\\[\\]/.?=:~!$^%+-])|\\G)(#)#*",
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.powershell"
				}
			},
			"end": "$(?=(\\n)?)",
			"endCaptures": {
				"1": {
					"name": "comment.line.powershell"
				}
			},
			"name": "comment.line.powershell",
			"patterns": [
				{
					"include": "#commentEmbeddedDocs"
				},
				{
					"include": "#RequiresDirective"
				}
			]
		},
		"argumentModeEscapes": {
			"patterns": [
				{
					"match": "`(?:['\\x{2018}-\\x{201B}0abnfrvt\"\\x{201C}-\\x{201E}$`\\n])",
					"name": "constant.character.escape.powershell"
				},
				{
					"match": "`",
					"name": "invalid.character.escape.powershell"
				}
			]
		},
		"attribute": {
			"begin": "(\\[)\\s*\\b(?i)(cmdletbinding|alias|flags|ordered|outputtype|parameter|validatenotnull|validatenotnullorempty|validatecount|validateset|allownull|allowemptycollection|allowemptystring|supportswildcards|validatescript|validaterange|validatepattern|validatelength)\\b",
			"beginCaptures": {
				"1": {
					"name": "punctuation.section.bracket.begin.powershell"
				},
				"2": {
					"name": "support.function.attribute.powershell"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.bracket.end.powershell"
				}
			},
			"name": "meta.attribute.powershell",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.group.begin.powershell"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.group.end.powershell"
						}
					},
					"patterns": [
						{
							"match": "(?i)\\b(mandatory|valuefrompipeline|valuefrompipelinebypropertyname|valuefromremainingarguments|position|parametersetname|defaultparametersetname|supportsshouldprocess|supportspaging|positionalbinding|helpuri|confirmimpact|helpmessage|ignorecase)\\b",
							"captures": {
								"1": {
									"name": "variable.parameter.attribute.powershell"
								},
								"2": {
									"name": "keyword.operator.assignment.powershell"
								}
							}
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"commands": {
			"patterns": [
				{
					"comment": "Verb-Noun pattern:",
					"match": "(?:(\\p{L}|\\d|_|-|\\\\|:)*\\\\)?\\b(?i:Add|Approve|Assert|Backup|Block|Build|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Deploy|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Mount|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Write)-.+?(?:\\.(?i:exe|cmd|bat|ps1))?\\b",
					"name": "support.function.powershell"
				},
				{
					"comment": "Builtin cmdlets with reserved verbs",
					"match": "(?<!\\w)(?i:foreach-object)(?!\\w)",
					"name": "support.function.powershell"
				},
				{
					"comment": "Builtin cmdlets with reserved verbs",
					"match": "(?<!\\w)(?i:where-object)(?!\\w)",
					"name": "support.function.powershell"
				},
				{
					"comment": "Builtin cmdlets with reserved verbs",
					"match": "(?<!\\w)(?i:sort-object)(?!\\w)",
					"name": "support.function.powershell"
				},
				{
					"comment": "Builtin cmdlets with reserved verbs",
					"match": "(?<!\\w)(?i:tee-object)(?!\\w)",
					"name": "support.function.powershell"
				}
			]
		},
		"commentEmbeddedDocs": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "constant.string.documentation.powershell"
						},
						"2": {
							"name": "keyword.operator.documentation.powershell"
						}
					},
					"match": "(?:^|\\G)(?i:\\s*(\\.)(COMPONENT|DESCRIPTION|EXAMPLE|EXTERNALHELP|FORWARDHELPCATEGORY|FORWARDHELPTARGETNAME|FUNCTIONALITY|INPUTS|LINK|NOTES|OUTPUTS|REMOTEHELPRUNSPACE|ROLE|SYNOPSIS))(?:\\s*$)",
					"name": "comment.documentation.embedded.powershell"
				},
				{
					"captures": {
						"1": {
							"name": "constant.string.documentation.powershell"
						},
						"2": {
							"name": "keyword.operator.documentation.powershell"
						},
						"3": {
							"name": "keyword.operator.documentation.powershell"
						}
					},
					"match": "(?:^|\\G)(?i:\\s*(\\.)(PARAMETER|FORWARDHELPTARGETNAME|FORWARDHELPCATEGORY|REMOTEHELPRUNSPACE|EXTERNALHELP)\\s+([a-z0-9-_]+))",
					"name": "comment.documentation.embedded.powershell"
				}
			]
		},
		"doubleQuotedStringEscapes": {
			"patterns": [
				{
					"match": "`(?:[0abnfrvt\\s\"\\x{201C}-\\x{201E}$`]|(?=$))",
					"name": "constant.character.escape.powershell"
				},
				{
					"match": "`",
					"name": "invalid.character.escape.powershell"
				},
				{
					"match": "(?:[\"\\x{201C}-\\x{201E}]){2}",
					"name": "constant.character.escape.powershell"
				}
			]
		},
		"doubleQuotedHereStringEscapes": {
			"patterns": [
				{
					"match": "`(?:[0abnfrvt\\s\"\\x{201C}-\\x{201E}'\\x{2018}-\\x{201B}$`]|(?=$))",
					"name": "constant.character.escape.powershell"
				},
				{
					"match": "`",
					"name": "invalid.character.escape.powershell"
				}
			]
		},
		"function": {
			"begin": "(?<![\\w-])((?i:function|filter|configuration|workflow))(?=\\s)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.function.powershell"
				}
			},
			"end": "(?=[//s])|(?<=})",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"begin": "(?<![\\w-])(?:(global|local|script|private)(:))?([\\p{L}:_\\\\/\\[\\]`-][[`\\\\\\w*\\[\\]/.?<>=:~!@#$^%+-]]*)",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.scope.powershell"
						},
						"2": {
							"name": "punctuation.separator.colon.powershell"
						},
						"3": {
							"name": "entity.name.function.powershell"
						}
					},
					"end": "(?=[//s])|(?<=})",
					"applyEndPatternLast": true,
					"patterns": [
						{
							"begin": "{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.section.braces.begin.powershell"
								}
							},
							"end": "}",
							"endCaptures": {
								"0": {
									"name": "punctuation.section.braces.end.powershell"
								}
							},
							"name": "meta.function.powershell",
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						{
							"include": "#invocationParameterSet"
						},
						{
							"include": "#commentBlock"
						},
						{
							"include": "#commentLine"
						},
						{
							"match": "(?<!})[^\\s{}()]+"
						}
					]
				},
				{
					"include": "#commentBlock"
				},
				{
					"include": "#commentLine"
				}
			]
		},
		"invocationParameterSet": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.group.begin.powershell"
				}
			},
			"name": "meta.parameters.powershell",
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.group.end.powershell"
				}
			},
			"patterns": [
				{
					"match": ",",
					"name": "punctuation.separator.comma.powershell"
				},
				{
					"include": "$self"
				}
			]
		},
		"interpolatedStringContent": {
			"begin": "(?=\\()",
			"end": "(?!.\\G)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.group.begin.powershell"
						}
					},
					"name": "interpolated.simple.source.powershell",
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.group.end.powershell"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "(?<=\\))(?=\\.(?!\\.)|::|\\[)",
					"end": "(?=[^\\s\\p{L}]|\\n)",
					"applyEndPatternLast": true,
					"patterns": [
						{
							"include": "#accessors"
						},
						{
							"include": "#commentLine"
						},
						{
							"include": "#commentBlock"
						},
						{
							"match": "[^\\s\\W]+"
						}
					]
				}
			]
		},
		"interpolation": {
			"begin": "(?=\\$\\()",
			"end": "(?!.\\G)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"begin": "(\\$)(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.subexpression.powershell"
						},
						"2": {
							"name": "punctuation.section.group.begin.powershell"
						}
					},
					"name": "meta.group.complex.subexpression.powershell",
					"end": "(\\))((?:(?:\\.|::)(?:[\\p{L}_]\\w*))*\\b)?((#).*$)?",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.group.end.powershell"
						},
						"2": {
							"name": "variable.other.member.powershell"
						},
						"4": {
							"name": "punctuation.definition.comment.powershell"
						},
						"3": {
							"name": "comment.line.powershell"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "(?<=\\))(?=\\.(?!\\.)|::|\\[)",
					"end": "(?=[^\\s\\p{L}]|\\n)",
					"applyEndPatternLast": true,
					"patterns": [
						{
							"include": "#accessors"
						},
						{
							"include": "#commentLine"
						},
						{
							"include": "#commentBlock"
						},
						{
							"match": "[^\\s\\W]+"
						}
					]
				}
			]
		},
		"stringInterpolation": {
			"begin": "(\\$)(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.subexpression.powershell"
				},
				"2": {
					"name": "punctuation.section.group.begin.powershell"
				}
			},
			"name": "meta.embedded.subexpression.powershell",
			"contentName": "interpolated.complex.source.powershell",
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.group.end.powershell"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"numericConstant": {
			"patterns": [
				{
					"beginCaptures": {
						"1": {
							"name": "constant.numeric.integer.powershell"
						},
						"3": {
							"name": "keyword.other.powershell"
						}
					},
					"begin": "(?:(?<!\\w)|\\G)([-+]?(?:[0-9]+(?i:(?![ed]|\\.(?!\\.))|(?:\\.[0-9]*)?((?:(?i:e)[-+]?[0-9]+)?l))|(?:\\.[0-9]+)\\g<2>))((?i:[kmgtp]b)?)\\b",
					"end": "\\G"
				},
				{
					"beginCaptures": {
						"1": {
							"name": "constant.numeric.hex.powershell"
						},
						"2": {
							"name": "keyword.other.powershell"
						}
					},
					"begin": "(?:(?<!\\w)|\\G)([-+]?0(?i:x[0-9a-f_]+l?))((?i:[kmgtp]b)?)\\b",
					"end": "\\G"
				},
				{
					"beginCaptures": {
						"1": {
							"name": "constant.numeric.decimal.powershell"
						},
						"2": {
							"name": "keyword.other.powershell"
						}
					},
					"begin": "(?:(?<!\\w)|\\G)([-+]?(?:(?:[0-9]+)|(?=\\.[0-9]))(?:\\.[0-9]*)?(?i:(?:e[-+]?[0-9]+)?(?!l)d?))((?i:[kmgtp]b)?)\\b",
					"end": "\\G"
				},
				{
					"captures": {
						"1": {
							"name": "constant.numeric.binary.powershell"
						},
						"2": {
							"name": "keyword.other.powershell"
						}
					},
					"comment": "(?:(?<!\\w)|\\G)([-+]?0(?i:b[01_]+l?))((?i:[kmgtp]b)?)(?!\\w)"
				}
			]
		},
		"scriptblock": {
			"begin": "(?={)",
			"end": "(?!.\\G)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.braces.begin.powershell"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.braces.begin.powershell"
						}
					},
					"name": "meta.scriptblock.powershell",
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "(?<=})(?=\\.(?!\\.)|::|\\[)",
					"end": "(?=[^\\s\\p{L}]|\\n)",
					"applyEndPatternLast": true,
					"patterns": [
						{
							"include": "#accessors"
						},
						{
							"include": "#commentLine"
						},
						{
							"include": "#commentBlock"
						},
						{
							"match": "[^\\s\\W]+"
						}
					]
				}
			]
		},
		"type": {
			"comment": "This is used by both type attribute references, attribute references need to be moved here",
			"begin": "(?=\\[)",
			"end": "(?!.\\G)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.bracket.begin.powershell"
						}
					},
					"end": "]",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.bracket.end.powershell"
						}
					},
					"applyEndPatternLast": true,
					"Name": "meta.type-reference.powershell",
					"patterns": [
						{
							"match": "(?i:ref)(?=\\])",
							"name": "storage.modifier.powershell"
						},
						{
							"include": "#type_SubType"
						},
						{
							"match": "[^\\s\\W]+"
						}
					]
				},
				{
					"begin": "(?<=])(?=\\.(?!\\.)|::|\\[)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.bracket.end.powershell"
						}
					},
					"end": "(?=[^\\s\\p{L}]|\\n)",
					"applyEndPatternLast": true,
					"patterns": [
						{
							"include": "#accessors"
						},
						{
							"include": "#type"
						},
						{
							"include": "#commentLine"
						},
						{
							"include": "#commentBlock"
						},
						{
							"match": "[^\\s\\W]+"
						}
					]
				}
			]
		},
		"type_SubType": {
			"patterns": [
				{
					"begin": "(\\[)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.bracket.begin.powershell"
						}
					},
					"end": "(])|(?>[^\\s\\p{L},])",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.bracket.end.powershell"
						}
					},
					"applyEndPatternLast": true,
					"comment:contentName": "meta.type-reference.powershell",
					"patterns": [
						{
							"include": "#type_SubType"
						},
						{
							"include": "#commentBlock"
						},
						{
							"include": "#commentLine"
						},
						{
							"match": "(?<!])[^\\s\\[\\]+]+"
						}
					]
				},
				{
					"begin": "((?<![\\w-])([\\p{L}_]\\w*(?:\\.\\g<2>?)?)(?:`+\\d+)?(?:\\++\\g<1>)?)",
					"beginCaptures": {
						"0": {
							"patterns": [
								{
									"include": "#type_keywords"
								},
								{
									"match": "[^\\.+]+",
									"name": "storage.type.powershell"
								},
								{
									"match": "\\.",
									"name": "punctuation.accessor.type.powershell.powershell"
								},
								{
									"match": "\\+",
									"name": "keyword.operator.type.powershell"
								}
							]
						}
					},
					"end": "(?=[^\\s])|(?<=])",
					"applyEndPatternLast": true,
					"patterns": [
						{
							"include": "#type_SubType"
						},
						{
							"include": "#commentBlock"
						},
						{
							"include": "#commentLine"
						},
						{
							"match": "(?<!])[^\\s\\[\\]+]+"
						}
					]
				}
			]
		},
		"type_keywords": {
			"comment": "primitive types and base classes often used",
			"patterns": [
				{
					"match": "(?<![\\w-])(?i:type|void|switch|(?:ps(?:custom)?)?object|hashtable|string|single|float|double|decimal|s?byte|bool(?:ean)?|char|valuetype|datetime|array|u?int(?:32|16|64)|int|long)(?!\\w)",
					"name": "keyword.type.powershell"
				},
				{
					"match": "(?<![\\w-])(?i:system|math|text|convert|regex|xml)(?!\\w)",
					"name": "support.class.powershell"
				}
			]
		},
		"accessors": {
			"patterns": [
				{
					"begin": "\\G(?:\\.(?!\\.)|::)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.accessor.powershell"
						}
					},
					"end": "(?=[^\\s\\p{L}]|\\n)",
					"applyEndPatternLast": true,
					"patterns": [
						{
							"include": "#members"
						},
						{
							"include": "#commentLine"
						},
						{
							"include": "#commentBlock"
						},
						{
							"match": "[^\\s\\W]+"
						}
					]
				},
				{
					"begin": "(?=\\[)",
					"end": "(?!.\\G)",
					"applyEndPatternLast": true,
					"patterns": [
						{
							"begin": "\\[",
							"beginCaptures": {
								"0": {
									"name": "punctuation.section.bracket.begin.powershell"
								}
							},
							"end": "]",
							"endCaptures": {
								"0": {
									"name": "punctuation.section.bracket.end.powershell"
								}
							},
							"name": "meta.index.powershell",
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						{
							"begin": "(?<=])(?=\\.(?!\\.)|::|\\[)",
							"end": "(?=[^\\s\\p{L}]|\\n)",
							"applyEndPatternLast": true,
							"patterns": [
								{
									"include": "#accessors"
								},
								{
									"include": "#commentLine"
								},
								{
									"include": "#commentBlock"
								},
								{
									"match": "[^\\s\\W]+"
								}
							]
						}
					]
				}
			]
		},
		"members": {
			"patterns": [
				{
					"match": "(?<!\\w-)((?i:(foreach|where)(?=[\\({])))",
					"name": "support.function.powershell"
				},
				{
					"match": "[\\p{L}_]\\w*(?=\\()",
					"captures": {
						"0": {
							"name": "variable.function.powershell"
						}
					}
				},
				{
					"begin": "[\\p{L}_]\\w*(?=\\.(?!\\.)|::|\\[)",
					"end": "(?=[^\\s\\p{L}]|\\n)",
					"applyEndPatternLast": true,
					"beginCaptures": {
						"0": {
							"name": "variable.other.object.property.powershell"
						}
					},
					"patterns": [
						{
							"include": "#accessors"
						},
						{
							"include": "#commentLine"
						},
						{
							"include": "#commentBlock"
						},
						{
							"match": "[^\\s\\W]+"
						}
					]
				},
				{
					"begin": "[\\p{L}_]\\w*",
					"end": "(?=[^\\s\\p{L}]|\\n)",
					"beginCaptures": {
						"0": {
							"name": "variable.other.property.powershell"
						}
					},
					"patterns": [
						{
							"include": "#commentLine"
						},
						{
							"include": "#commentBlock"
						},
						{
							"match": "[^\\s\\W]+"
						}
					]
				},
				{
					"include": "#quotedStrings_Members"
				}
			]
		},
		"variable_inner": {
			"comment": "seperate the parts of the variable name and scope them",
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "constant.language.powershell"
						},
						"2": {
							"name": "punctuation.definition.variable.powershell"
						},
						"5": {
							"name": "punctuation.definition.comment.powershell"
						},
						"4": {
							"name": "comment.line.powershell"
						}
					},
					"comment": "These are special constants.",
					"match": "((\\$)(?i:(:?(?:False|Null|True)))\\b)"
				},
				{
					"captures": {
						"1": {
							"name": "variable.language.builtin.powershell"
						},
						"2": {
							"name": "punctuation.definition.variable.powershell"
						},
						"4": {
							"name": "variable.other.member.powershell"
						},
						"6": {
							"name": "punctuation.definition.comment.powershell"
						},
						"5": {
							"name": "comment.line.powershell"
						}
					},
					"comment": "These are the other built-in constants.",
					"match": "((\\$)(?i:(:?(?:Error|ExecutionContext|Host|Home|PID|PsHome|PsVersionTable|ShellID)\\b)))"
				},
				{
					"captures": {
						"1": {
							"name": "variable.language.builtin.powershell"
						},
						"2": {
							"name": "punctuation.definition.variable.powershell"
						},
						"4": {
							"name": "variable.other.member.powershell"
						},
						"6": {
							"name": "punctuation.definition.comment.powershell"
						},
						"5": {
							"name": "comment.line.powershell"
						}
					},
					"match": "((\\$)(?i:((?:[$^?])|:\\?|:?(?:_|Args|ConsoleFileName|Event|EventArgs|EventSubscriber|ForEach|Input|LastExitCode|Matches|MyInvocation|NestedPromptLevel|Profile|PSBoundParameters|PsCmdlet|PsCulture|PSDebugContext|PSItem|PSCommandPath|PSScriptRoot|PsUICulture|Pwd|Sender|SourceArgs|SourceEventArgs|StackTrace|Switch|This)\\b)))"
				},
				{
					"captures": {
						"1": {
							"name": "variable.language.powershell"
						},
						"2": {
							"name": "punctuation.definition.variable.powershell"
						},
						"4": {
							"name": "variable.other.member.powershell"
						},
						"6": {
							"name": "punctuation.definition.comment.powershell"
						},
						"5": {
							"name": "comment.line.powershell"
						}
					},
					"comment": "Style preference variables as language variables so that they stand out.",
					"match": "((\\$)(?i:(:?(?:ConfirmPreference|DebugPreference|ErrorActionPreference|ErrorView|FormatEnumerationLimit|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount|MaximumHistoryCount|MaximumVariableCount|OFS|OutputEncoding|ProgressPreference|PsCulture|PSDebugContext|PSDefaultParameterValues|PSEmailServer|PSItem|PSModuleAutoloadingPreference|PSSenderInfo|PSSessionApplicationName|PSSessionConfigurationName|PSSessionOption|VerbosePreference|WarningPreference|WhatIfPreference)\\b)))"
				},
				{
					"captures": {
						"1": {
							"name": "variable.other.readwrite.powershell"
						},
						"2": {
							"name": "punctuation.definition.variable.powershell"
						},
						"3": {
							"name": "storage.modifier.scope.powershell"
						},
						"4": {
							"name": "support.variable.drive.powershell"
						},
						"6": {
							"name": "variable.other.member.powershell"
						},
						"8": {
							"name": "punctuation.definition.comment.powershell"
						},
						"7": {
							"name": "comment.line.powershell"
						}
					},
					"match": "((?i:(\\$)(?:(?:(global|local|private|script|using|workflow):|((?:[\\p{L}_]\\w*):|:))(?!:))?+((?:\\p{L}|\\d|[_?]|:(?!:))+)))"
				},
				{
					"captures": {
						"1": {
							"name": "variable.other.readwrite.powershell"
						},
						"2": {
							"name": "punctuation.definition.variable.powershell"
						},
						"3": {
							"name": "storage.modifier.scope.powershell"
						},
						"4": {
							"name": "support.variable.drive.powershell"
						}
					},
					"comment": "splatting cannot have members and certain characters following, including no line comment",
					"match": "((?i:(\\@)(?:(?:(global|local|private|script|using|workflow):|((?:[\\p{L}_]\\w*):|:))(?!:))?+((?:\\p{L}|\\d|[_?]|:(?!:))++)))(?![~`!@#$%^*<>\\]\\\\/+-])"
				},
				{
					"captures": {
						"1": {
							"name": "variable.other.readwrite.powershell"
						},
						"2": {
							"name": "punctuation.definition.variable.powershell"
						},
						"3": {
							"name": "punctuation.definition.variable.braces.begin.powershell"
						},
						"4": {
							"name": "storage.modifier.scope.powershell"
						},
						"5": {
							"name": "support.variable.drive.powershell"
						},
						"7": {
							"name": "punctuation.definition.variable.braces.end.powershell"
						},
						"8": {
							"name": "variable.other.member.powershell"
						},
						"10": {
							"name": "punctuation.definition.comment.powershell"
						},
						"9": {
							"name": "comment.line.powershell"
						}
					},
					"match": "((?i:(\\$)(\\{)(?:(?:(global|local|private|script|using|workflow):|((?:[^`{}:]|`[`{}]?)+:|:)))?+([^`{}]|`[`{}]?)+(\\})))"
				}
			]
		},
		"variable": {
			"patterns": [
				{
					"begin": "(?=\\$(?:(?:(?:(?:[\\p{L}_]\\w*):|:)(?!:))?+(?:\\p{L}|\\d|[_?]|:(?!:))+|\\{(?:(?:(?:[^`{}:]|`[`{}]?)+:|:))?+([^`{}]|`[`{}]?)+(\\})))",
					"end": "(?!.\\G)",
					"applyEndPatternLast": true,
					"patterns": [
						{
							"begin": "\\$(?:(?:(?:(?:[\\p{L}_]\\w*):|:)(?!:))?+(?:\\p{L}|\\d|[_?]|:(?!:))+|\\{(?:(?:(?:[^`{}:]|`[`{}]?)+:|:))?+([^`{}]|`[`{}]?)+(\\}))(?=\\.(?!\\.)|::|\\[)",
							"beginCaptures": {
								"0": {
									"patterns": [
										{
											"include": "#variable_inner"
										}
									]
								}
							},
							"end": "(?=[^\\s\\p{L}]|\\n)",
							"applyEndPatternLast": true,
							"patterns": [
								{
									"include": "#accessors"
								},
								{
									"include": "#commentLine"
								},
								{
									"include": "#commentBlock"
								},
								{
									"match": "[^\\s\\W]+"
								}
							]
						},
						{
							"begin": "\\$(?:(?:(?:(?:[\\p{L}_]\\w*):|:)(?!:))?+(?:\\p{L}|\\d|[_?]|:(?!:))+|\\{(?:(?:(?:[^`{}:]|`[`{}]?)+:|:))?+([^`{}]|`[`{}]?)+(\\}))",
							"end": "(?!.\\G)",
							"applyEndPatternLast": true,
							"captures": {
								"0": {
									"patterns": [
										{
											"include": "#variable_inner"
										}
									]
								}
							}
						}
					]
				},
				{
					"match": "@(?:(?:(?:[\\p{L}_]\\w*):|:)(?!:))?+(?:\\p{L}|\\d|[_?]|:(?!:))++(?![~`!@#$%^*<>\\]\\\\/'\"+-])",
					"captures": {
						"0": {
							"patterns": [
								{
									"include": "#variable_inner"
								}
							]
						}
					}
				}
			]
		},
		"UsingDirective": {
			"match": "(?<!\\w)(?i:(using))\\s+(?i:(namespace|module))\\s+(?i:((?:\\w+(?:\\.)?)+))",
			"captures": {
				"1": {
					"name": "keyword.control.using.powershell"
				},
				"2": {
					"name": "keyword.other.powershell"
				},
				"3": {
					"name": "variable.parameter.powershell"
				}
			}
		},
		"RequiresDirective": {
			"begin": "(?<=#)(?i:(requires))\\s",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.requires.powershell"
				}
			},
			"end": "$",
			"name": "meta.requires.powershell",
			"patterns": [
				{
					"match": "\\-(?i:Modules|PSSnapin|RunAsAdministrator|ShellId|Version)",
					"name": "keyword.other.powershell"
				},
				{
					"match": "(?<!-)\\b\\p{L}+|\\d+(?:\\.\\d+)*",
					"name": "variable.parameter.powershell"
				},
				{
					"include": "#hashtable"
				}
			]
		},
		"variableNoProperty": {
			"match": "(\\$)((?:(?:(?:[\\p{L}_]\\w*):|:)(?!:))?+(?:\\p{L}|\\d|[_?]|:(?!:))+|\\{(?:(?:(?:[^`{}:]|`[`{}]?)+:|:))?+([^`{}]|`[`{}]?)+(\\}))",
			"captures": {
				"0": {
					"patterns": [
						{
							"include": "#variable_inner"
						}
					]
				}
			},
			"name": "meta.embedded.interpolated.powershell"
		},
		"hashtable": {
			"begin": "(@)(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.hashtable.begin.powershell"
				},
				"2": {
					"name": "punctuation.section.braces.begin.powershell"
				}
			},
			"end": "(\\})((?:(?:\\.|::)(?:[\\p{L}_]\\w*))*\\b)?((#).*$)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.braces.end.powershell"
				},
				"2": {
					"name": "variable.other.member.powershell"
				},
				"4": {
					"name": "punctuation.definition.comment.powershell"
				},
				"3": {
					"name": "comment.line.powershell"
				}
			},
			"name": "meta.hashtable.powershell",
			"patterns": [
				{
					"match": "\\b(\\w+)(?=\\s*=)",
					"name": "entity.name.variable.property.powershell"
				},
				{
					"comment": "#scriptblock"
				},
				{
					"include": "$self"
				}
			]
		},
		"quotedStrings": {
			"patterns": [
				{
					"begin": "['\\x{2018}-\\x{201B}]",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.powershell"
						}
					},
					"end": "['\\x{2018}-\\x{201B}]",
					"applyEndPatternLast": true,
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.powershell"
						}
					},
					"name": "string.quoted.single.powershell",
					"patterns": [
						{
							"match": "['\\x{2018}-\\x{201B}]{2}",
							"name": "constant.character.escape.powershell"
						}
					]
				},
				{
					"begin": "@(?:[\"\\x{201C}-\\x{201E}])(?=\\s*$)",
					"end": "^(?:[\"\\x{201C}-\\x{201E}])@",
					"name": "string.quoted.double.heredoc.powershell",
					"patterns": [
						{
							"include": "#variableNoProperty"
						},
						{
							"include": "#doubleQuotedHereStringEscapes"
						},
						{
							"include": "#stringInterpolation"
						}
					]
				},
				{
					"begin": "@['\\x{2018}-\\x{201B}](?=\\s*$)",
					"end": "^['\\x{2018}-\\x{201B}]@",
					"name": "string.quoted.single.heredoc.powershell"
				},
				{
					"begin": "(?:[\"\\x{201C}-\\x{201E}])",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.powershell"
						}
					},
					"end": "(?:[\"\\x{201C}-\\x{201E}])",
					"applyEndPatternLast": true,
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.powershell"
						}
					},
					"name": "string.quoted.double.powershell",
					"patterns": [
						{
							"comment": "(?i)\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,64}\\b"
						},
						{
							"include": "#variableNoProperty"
						},
						{
							"include": "#doubleQuotedStringEscapes"
						},
						{
							"include": "#stringInterpolation"
						},
						{
							"match": "`\\s*$",
							"name": "keyword.other.powershell"
						}
					]
				}
			]
		},
		"quotedStrings_Members": {
			"begin": "(?=@?(['\\x{2018}-\\x{201B}\"\\x{201C}-\\x{201E}]))(?:(?<!@\\g<1>)|\\s*$)",
			"end": "(?!.\\G)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"include": "#quotedStrings"
				},
				{
					"begin": "(?<=^(['\\x{2018}-\\x{201B}\"\\x{201C}-\\x{201E}])@|(?<=\\g<1>))(?=\\.(?!\\.)|::|\\[)",
					"end": "(?=[^\\s\\p{L}]|\\n)",
					"applyEndPatternLast": true,
					"patterns": [
						{
							"include": "#accessors"
						},
						{
							"include": "#commentLine"
						},
						{
							"include": "#commentBlock"
						},
						{
							"match": "[^\\s\\W]+"
						}
					]
				}
			]
		}
	}
}
