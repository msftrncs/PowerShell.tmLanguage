{
	"information_for_contributors": [
		"This file has been converted from https://github.com/PowerShell/EditorSyntax/blob/master/PowerShellSyntax.tmLanguage",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "altered from https://github.com/PowerShell/EditorSyntax/commit/472c9447da4e3160bef211d5e1a0c2dee3cce497",
	"name": "PowerShell",
	"scopeName": "source.powershell",
	"patterns": [
		{
			"begin": "<#",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.block.begin.powershell"
				}
			},
			"end": "#>",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.block.end.powershell"
				}
			},
			"name": "comment.block.powershell",
			"patterns": [
				{
					"include": "#commentEmbeddedDocs"
				}
			]
		},
		{
			"match": "[2-6]>&1|>>|>|<<|<|>|>\\||[1-6]>|[1-6]>>",
			"name": "keyword.operator.redirection.powershell"
		},
		{
			"include": "#commands"
		},
		{
			"include": "#commentLine"
		},
		{
			"include": "#variable"
		},
		{
			"include": "#interpolatedStringContent"
		},
		{
			"include": "#function"
		},
		{
			"include": "#attribute"
		},
		{
			"include": "#UsingDirective"
		},
		{
			"include": "#type"
		},
		{
			"include": "#hashtable"
		},
		{
			"include": "#doubleQuotedString"
		},
		{
			"include": "#scriptblock"
		},
		{
			"comment": "Needed to parse stuff correctly in 'argument mode'. (See about_parsing.)",
			"include": "#argumentModeEscapes"
		},
		{
			"begin": "['\\x{2018}-\\x{201B}]",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.powershell"
				}
			},
			"end": "['\\x{2018}-\\x{201B}]",
			"applyEndPatternLast": true,
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.powershell"
				}
			},
			"name": "string.quoted.single.powershell",
			"patterns": [
				{
					"match": "['\\x{2018}-\\x{201B}]{2}",
					"name": "constant.character.escape.powershell"
				}
			]
		},
		{
			"begin": "\\@(?:[\"\\x{201C}-\\x{201E}])(?=\\s*$)",
			"end": "^(?:[\"\\x{201C}-\\x{201E}])@",
			"name": "string.quoted.double.heredoc.powershell",
			"patterns": [
				{
					"include": "#variableNoProperty"
				},
				{
					"include": "#doubleQuotedHereStringEscapes"
				},
				{
					"include": "#stringInterpolation"
				}
			]
		},
		{
			"begin": "\\@['\\x{2018}-\\x{201B}](?=\\s*$)",
			"end": "^['\\x{2018}-\\x{201B}]@",
			"name": "string.quoted.single.heredoc.powershell"
		},
		{
			"include": "#numericConstant"
		},
		{
			"begin": "(@)(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.array.begin.powershell"
				},
				"2": {
					"name": "punctuation.section.group.begin.powershell"
				}
			},
			"end": "(\\))((?:(?:\\.|::)(?:\\p{L}|\\d|_)+)*\\b)?((#).*$\\n?)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.group.end.powershell"
				},
				"2": {
					"name": "variable.other.member.powershell"
				},
				"4": {
					"name": "punctuation.definition.comment.powershell"
				},
				"3": {
					"name": "comment.line.powershell"
				}
			},
			"name": "meta.group.array-expression.powershell",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"include": "#interpolation"
		},
		{
			"match": "(\\b(([\\p{L}0-9_\\.!%^&+=][\\p{L}0-9_\\.!@#%^&+=-]*)\\.(?i:exe|com|cmd|bat))\\b)",
			"name": "support.function.powershell"
		},
		{
			"match": "(?<!\\w|-|\\.)((?i:begin|break|catch|continue|data|default|define|do|dynamicparam|else|elseif|end|exit|finally|for|from|if|in|inlinescript|parallel|param|process|return|sequence|switch|throw|trap|try|until|var|while)\\b(?![\\/.-]))",
			"name": "keyword.control.powershell"
		},
		{
			"match": "(?<!\\w|-|[^\\)]\\.)((?i:(foreach|where)\\b(?![\\/.-])))",
			"name": "keyword.control.powershell"
		},
		{
			"begin": "(?<!\\w)(--%)(?!\\w)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.powershell"
				}
			},
			"end": "$|(?=\\|)",
			"patterns": [
				{
					"match": "[^\"\\x{201C}-\\x{201E}]+?",
					"name": "string.unquoted.powershell"
				},
				{
					"begin": "(?:[\"\\x{201C}-\\x{201E}])",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.powershell"
						}
					},
					"end": "(?:[\"\\x{201C}-\\x{201E}])|$",
					"applyEndPatternLast": true,
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.powershell"
						}
					},
					"name": "string.quoted.double.powershell"
				}
			],
			"comment": "This should be moved to the repository at some point."
		},
		{
			"comment": "This should only be relevant inside a class but will require a rework of how classes are matched. This is a temp fix.",
			"match": "(?<!\\w)((?i:hidden|static))(?!\\w)",
			"name": "storage.modifier.powershell"
		},
		{
			"captures": {
				"1": {
					"name": "storage.type.powershell"
				},
				"2": {
					"name": "entity.name.class.powershell"
				}
			},
			"match": "(?<!\\w|-)((?i:class))(?:\\s)+([\\p{L}_]\\w*)\\b"
		},
		{
			"begin": "(?<!\\w|-)((?i:enum))(?=\\s)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.powershell"
				}
			},
			"end": "(?=.)|(?<=})",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"match": "(?<!})\\s+"
				},
				{
					"begin": "\\b([\\p{L}_]\\w*)\\b",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.powershell"
						}
					},
					"end": "(?=.)|(?<=})",
					"applyEndPatternLast": true,
					"patterns": [
						{
							"match": "(?<!})\\s+"
						},
						{
							"begin": "{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.section.braces.begin.powershell"
								}
							},
							"end": "}",
							"endCaptures": {
								"0": {
									"name": "punctuation.section.braces.end.powershell"
								}
							},
							"name": "meta.enumeration.powershell",
							"patterns": [
								{
									"match": "\\b(\\w+)(?=\\s*=)",
									"name": "variable.other.property.powershell"
								},
								{
									"include": "$self"
								}
							]
						}
					]
				}
			]
		},
		{
			"match": "(?:(?<!\\w)|\\G)-(?i:is(?:not)?|as)(?!\\p{L})",
			"name": "keyword.operator.comparison.powershell"
		},
		{
			"match": "(?:(?<!\\w|!)|\\G)-(?i:[ic]?(?:eq|ne|[gl][te]|(?:not)?(?:like|match|contains|in)|replace))(?!\\p{L})",
			"name": "keyword.operator.comparison.powershell"
		},
		{
			"match": "(?:(?<!\\w|!)|\\G)-(?i:join|split)(?!\\p{L})",
			"name": "keyword.operator.unary.powershell"
		},
		{
			"match": "(?:(?<!\\w|!)|\\G)-(?i:and|or|not|xor)(?!\\p{L})|!",
			"name": "keyword.operator.logical.powershell"
		},
		{
			"match": "(?:(?<!\\w|!)|\\G)-(?i:band|bor|bnot|bxor|shl|shr)(?!\\p{L})",
			"name": "keyword.operator.bitwise.powershell"
		},
		{
			"match": "(?:(?<!\\w|!)|\\G)-(?i:f)(?!\\p{L})",
			"name": "keyword.operator.string-format.powershell"
		},
		{
			"match": "(?:(?<!\\w|!)|\\G)-\\p{L}\\w*",
			"name": "entity.name.parameter.powershell"
		},
		{
			"match": "[+%*/-]?=|[+/*%-](?!\\p{L})",
			"name": "keyword.operator.assignment.powershell"
		},
		{
			"match": "\\|\\||&&|;",
			"name": "punctuation.terminator.statement.powershell"
		},
		{
			"match": "&|(?<!\\w|!)(?<!\\.)\\.(?=\\s)|,|\\|",
			"name": "keyword.operator.other.powershell"
		},
		{
			"comment": "This is very imprecise, is there a syntax for 'must come after...' ",
			"match": "(?<!^)\\s*\\.\\.\\s*(?=\\-?\\d|\\(|\\$)",
			"name": "keyword.operator.range.powershell"
		}
	],
	"repository": {
		"commentLine": {
			"begin": "(?:(?<![`\\\\\\w*\\[\\]/.?=:~!$^%+-])|\\G)(#)#*",
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.powershell"
				}
			},
			"end": "$\\n?",
			"name": "comment.line.powershell",
			"patterns": [
				{
					"include": "#commentEmbeddedDocs"
				},
				{
					"include": "#RequiresDirective"
				}
			]
		},
		"argumentModeEscapes": {
			"patterns": [
				{
					"match": "`(?:['\\x{2018}-\\x{201B}0abnfrvt\"\\x{201C}-\\x{201E}$`]|(?=$))",
					"name": "constant.character.escape.powershell"
				},
				{
					"match": "`",
					"name": "invalid.character.escape.powershell"
				},
				{
					"match": "(?:[\"\\x{201C}-\\x{201E}]){2}",
					"name": "constant.character.escape.powershell"
				}
			]
		},
		"attribute": {
			"begin": "(\\[)\\s*\\b(?i)(cmdletbinding|alias|flags|outputtype|parameter|validatenotnull|validatenotnullorempty|validatecount|validateset|allownull|allowemptycollection|allowemptystring|supportswildcards|validatescript|validaterange|validatepattern|validatelength)\\b",
			"beginCaptures": {
				"1": {
					"name": "punctuation.section.bracket.begin.powershell"
				},
				"2": {
					"name": "support.function.attribute.powershell"
				}
			},
			"end": "(\\])((?:(?:\\.|::)(?:\\p{L}|\\d|_)+)*\\b)?((#).*$\\n?)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.bracket.end.powershell"
				},
				"2": {
					"name": "variable.other.member.powershell"
				},
				"4": {
					"name": "punctuation.definition.comment.powershell"
				},
				"3": {
					"name": "comment.line.powershell"
				}
			},
			"name": "meta.attribute.powershell",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.group.begin.powershell"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.group.end.powershell"
						}
					},
					"patterns": [
						{
							"comment": "#variable"
						},
						{
							"comment": "#hashtable"
						},
						{
							"comment": "#scriptblock"
						},
						{
							"comment": "#doubleQuotedStringEscapes"
						},
						{
							"comment": "#doubleQuotedString"
						},
						{
							"comment": "#type"
						},
						{
							"comment": "#numericConstant"
						},
						{
							"comment": "#doubleQuotedString"
						},
						{
							"include": "$self"
						},
						{
							"match": "(?i)\\b(mandatory|valuefrompipeline|valuefrompipelinebypropertyname|valuefromremainingarguments|position|parametersetname|defaultparametersetname|supportsshouldprocess|supportspaging|positionalbinding|helpuri|confirmimpact|helpmessage)\\b(?:\\s+)?(=)?",
							"captures": {
								"1": {
									"name": "variable.parameter.attribute.powershell"
								},
								"2": {
									"name": "keyword.operator.assignment.powershell"
								}
							}
						},
						{
							"begin": "['\\x{2018}-\\x{201B}]",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.string.begin.powershell"
								}
							},
							"end": "['\\x{2018}-\\x{201B}]",
							"applyEndPatternLast": true,
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.string.end.powershell"
								}
							},
							"name": "string.quoted.single.powershell",
							"patterns": [
								{
									"match": "['\\x{2018}-\\x{201B}]{2}",
									"name": "constant.character.escape.powershell"
								}
							]
						}
					]
				}
			]
		},
		"commands": {
			"patterns": [
				{
					"comment": "Verb-Noun pattern:",
					"match": "(?:(\\p{L}|\\d|_|-|\\\\|:)*\\\\)?\\b(?i:Add|Approve|Assert|Backup|Block|Build|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Deploy|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Mount|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Write)-.+?(?:\\.(?i:exe|cmd|bat|ps1))?\\b",
					"name": "support.function.powershell"
				},
				{
					"comment": "Builtin cmdlets with reserved verbs",
					"match": "(?<!\\w)(?i:foreach-object)(?!\\w)",
					"name": "support.function.powershell"
				},
				{
					"comment": "Builtin cmdlets with reserved verbs",
					"match": "(?<!\\w)(?i:where-object)(?!\\w)",
					"name": "support.function.powershell"
				},
				{
					"comment": "Builtin cmdlets with reserved verbs",
					"match": "(?<!\\w)(?i:sort-object)(?!\\w)",
					"name": "support.function.powershell"
				},
				{
					"comment": "Builtin cmdlets with reserved verbs",
					"match": "(?<!\\w)(?i:tee-object)(?!\\w)",
					"name": "support.function.powershell"
				}
			]
		},
		"commentEmbeddedDocs": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "constant.string.documentation.powershell"
						},
						"2": {
							"name": "keyword.operator.documentation.powershell"
						}
					},
					"match": "(?:^|\\G)(?i:\\s*(\\.)(COMPONENT|DESCRIPTION|EXAMPLE|EXTERNALHELP|FORWARDHELPCATEGORY|FORWARDHELPTARGETNAME|FUNCTIONALITY|INPUTS|LINK|NOTES|OUTPUTS|REMOTEHELPRUNSPACE|ROLE|SYNOPSIS))(?:\\s*$)",
					"name": "comment.documentation.embedded.powershell"
				},
				{
					"captures": {
						"1": {
							"name": "constant.string.documentation.powershell"
						},
						"2": {
							"name": "keyword.operator.documentation.powershell"
						},
						"3": {
							"name": "keyword.operator.documentation.powershell"
						}
					},
					"match": "(?:^|\\G)(?i:\\s*(\\.)(PARAMETER|FORWARDHELPTARGETNAME|FORWARDHELPCATEGORY|REMOTEHELPRUNSPACE|EXTERNALHELP)\\s+([a-z0-9-_]+))",
					"name": "comment.documentation.embedded.powershell"
				}
			]
		},
		"doubleQuotedStringEscapes": {
			"patterns": [
				{
					"match": "`(?:[0abnfrvt\\s\"\\x{201C}-\\x{201E}$`]|(?=$))",
					"name": "constant.character.escape.powershell"
				},
				{
					"match": "`",
					"name": "invalid.character.escape.powershell"
				},
				{
					"match": "(?:[\"\\x{201C}-\\x{201E}]){2}",
					"name": "constant.character.escape.powershell"
				}
			]
		},
		"doubleQuotedHereStringEscapes": {
			"patterns": [
				{
					"match": "`(?:[0abnfrvt\\s\"\\x{201C}-\\x{201E}'\\x{2018}-\\x{201B}$`]|(?=$))",
					"name": "constant.character.escape.powershell"
				},
				{
					"match": "`",
					"name": "invalid.character.escape.powershell"
				}
			]
		},
		"function": {
			"begin": "^(?:\\s*+)(?i)(function|filter|configuration|workflow)\\s+(?:(global|local|script|private):)?((?:\\p{L}|\\d|_|-|\\.)+)",
			"beginCaptures": {
				"0": {
					"name": "meta.function.powershell"
				},
				"1": {
					"name": "storage.type.powershell"
				},
				"2": {
					"name": "storage.modifier.scope.powershell"
				},
				"3": {
					"name": "entity.name.function.powershell"
				}
			},
			"end": "(?=\\{|\\()",
			"patterns": [
				{
					"include": "#commentLine"
				}
			]
		},
		"interpolatedStringContent": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.group.begin.powershell"
				}
			},
			"name": "interpolated.simple.source.powershell",
			"end": "(\\))((?:(?:\\.|::)(?:\\p{L}|\\d|_)+)*\\b)?((#).*$\\n?)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.group.end.powershell"
				},
				"2": {
					"name": "variable.other.member.powershell"
				},
				"4": {
					"name": "punctuation.definition.comment.powershell"
				},
				"3": {
					"name": "comment.line.powershell"
				}
			},
			"patterns": [
				{
					"include": "$self"
				},
				{
					"include": "#interpolation"
				}
			]
		},
		"interpolation": {
			"begin": "(\\$)(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.subexpression.powershell"
				},
				"2": {
					"name": "punctuation.section.group.begin.powershell"
				}
			},
			"name": "meta.group.complex.subexpression.powershell",
			"end": "(\\))((?:(?:\\.|::)(?:\\p{L}|\\d|_)+)*\\b)?((#).*$\\n?)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.group.end.powershell"
				},
				"2": {
					"name": "variable.other.member.powershell"
				},
				"4": {
					"name": "punctuation.definition.comment.powershell"
				},
				"3": {
					"name": "comment.line.powershell"
				}
			},
			"patterns": [
				{
					"include": "$self"
				},
				{
					"comment": "#commands"
				},
				{
					"comment": "#variable"
				},
				{
					"comment": "#interpolatedStringContent"
				},
				{
					"comment": "#function"
				},
				{
					"comment": "#attribute"
				},
				{
					"comment": "#type"
				},
				{
					"comment": "#hashtable"
				},
				{
					"comment": "#doubleQuotedString"
				},
				{
					"comment": "#scriptblock"
				}
			]
		},
		"stringInterpolation": {
			"begin": "(\\$)(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.subexpression.powershell"
				},
				"2": {
					"name": "punctuation.section.group.begin.powershell"
				}
			},
			"name": "meta.embedded.subexpression.powershell",
			"contentName": "interpolated.complex.source.powershell",
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.group.end.powershell"
				}
			},
			"patterns": [
				{
					"comment": "#interpolation"
				},
				{
					"include": "$self"
				},
				{
					"comment": "#commands"
				},
				{
					"comment": "#variable"
				},
				{
					"comment": "#interpolatedStringContent"
				},
				{
					"comment": "#function"
				},
				{
					"comment": "#attribute"
				},
				{
					"comment": "#type"
				},
				{
					"comment": "#hashtable"
				},
				{
					"comment": "#doubleQuotedString"
				},
				{
					"comment": "#scriptblock"
				}
			]
		},
		"numericConstant": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "constant.numeric.hex.powershell"
						},
						"2": {
							"name": "keyword.other.powershell"
						}
					},
					"match": "(?<!\\w)([-+]?0(?:x|X)[0-9a-fA-F_]+(?:U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?)((?i:[kmgtp]b)?)\\b"
				},
				{
					"captures": {
						"1": {
							"name": "constant.numeric.integer.powershell"
						},
						"2": {
							"name": "keyword.other.powershell"
						}
					},
					"match": "(?<!\\w)([-+]?(?:[0-9_]+)?\\.[0-9_]+(?:(?:e|E)[0-9]+)?(?:F|f|D|d|M|m)?)((?i:[kmgtp]b)?)\\b"
				},
				{
					"captures": {
						"1": {
							"name": "constant.numeric.octal.powershell"
						},
						"2": {
							"name": "keyword.other.powershell"
						}
					},
					"match": "(?<!\\w)([-+]?0(?:b|B)[01_]+(?:U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?)((?i:[kmgtp]b)?)\\b"
				},
				{
					"captures": {
						"1": {
							"name": "constant.numeric.integer.powershell"
						},
						"2": {
							"name": "keyword.other.powershell"
						}
					},
					"match": "(?<!\\w)([-+]?[0-9_]+(?:e|E)(?:[0-9_])?+(?:F|f|D|d|M|m)?)((?i:[kmgtp]b)?)\\b"
				},
				{
					"captures": {
						"1": {
							"name": "constant.numeric.integer.powershell"
						},
						"2": {
							"name": "keyword.other.powershell"
						}
					},
					"match": "(?<!\\w)([-+]?[0-9_]+\\.(?:e|E)(?:[0-9_])?+(?:F|f|D|d|M|m)?)((?i:[kmgtp]b)?)\\b"
				},
				{
					"captures": {
						"1": {
							"name": "constant.numeric.integer.powershell"
						},
						"2": {
							"name": "keyword.other.powershell"
						}
					},
					"match": "(?<!\\w)([-+]?[0-9_]+[\\.]?(?:F|f|D|d|M|m))((?i:[kmgtp]b)?)\\b"
				},
				{
					"captures": {
						"1": {
							"name": "constant.numeric.integer.powershell"
						},
						"2": {
							"name": "keyword.other.powershell"
						}
					},
					"match": "(?<!\\w)([-+]?[0-9_]+[\\.]?(?:U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?)((?i:[kmgtp]b)?)\\b"
				}
			]
		},
		"scriptblock": {
			"begin": "{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.braces.begin.powershell"
				}
			},
			"end": "(})((?:(?:\\.|::)(?:\\p{L}|\\d|_)+)*\\b)?((#).*$\\n?)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.braces.end.powershell"
				},
				"2": {
					"name": "variable.other.member.powershell"
				},
				"4": {
					"name": "punctuation.definition.comment.powershell"
				},
				"3": {
					"name": "comment.line.powershell"
				}
			},
			"name": "meta.scriptblock.powershell",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"type": {
			"comment": "This is used by both type and index references",
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.bracket.begin.powershell"
				}
			},
			"end": "(?!\\G)",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"begin": "](?=\\.|::)",
					"end": "(?!\\G)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.bracket.end.powershell"
						}
					},
					"patterns": [
						{
							"include": "#members"
						}
					]
				},
				{
					"match": "]",
					"name": "punctuation.section.bracket.end.powershell"
				},
				{
					"match": "(?i:type|void|string|pscustomobject|hashtable|ordered|single|float|double|decimal|s?byte|boolean|char|valuetype|datetime|array|u?int(?:32|16|64)|int|long)(?=\\]|\\[])",
					"name": "support.type.primitive.powershell"
				},
				{
					"match": "(?i:regex|xml)(?=\\]|\\[])",
					"name": "support.class.powershell"
				},
				{
					"match": "(?i:ref)(?=\\])",
					"name": "storage.modifier.powershell"
				},
				{
					"match": "(?:[\\p{L}_]\\w*\\.?)+(?:`\\d+)?",
					"name": "entity.name.type.powershell"
				},
				{
					"include": "#type"
				},
				{
					"include": "$self"
				}
			]
		},
		"members": {
			"patterns": [
				{
					"match": "\\G(\\.|::)([\\p{L}_]\\w*)(?=\\()",
					"captures": {
						"1": {
							"name": "punctuation.accessor.powershell"
						},
						"2": {
							"name": "variable.function.powershell"
						}
					}
				},
				{
					"begin": "\\G(\\.|::)([\\p{L}_]\\w*)(?=\\.)(?!\\.\\.)",
					"end": "(?!\\G)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.accessor.powershell"
						},
						"2": {
							"name": "variable.other.object.property.powershell"
						}
					},
					"patterns": [
						{
							"include": "#commentLine",
							"comment": "needs to include block comments too"
						},
						{
							"include": "#members"
						}
					]
				},
				{
					"begin": "\\G(\\.|::)([\\p{L}_]\\w*)(?!\\.)",
					"end": "(?!\\G)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.accessor.powershell"
						},
						"2": {
							"name": "variable.other.property.powershell"
						}
					},
					"patterns": [
						{
							"include": "#commentLine"
						},
						{
							"include": "#members"
						}
					]
				}
			]
		},
		"variable": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "constant.language.powershell"
						},
						"2": {
							"name": "punctuation.definition.variable.powershell"
						},
						"5": {
							"name": "punctuation.definition.comment.powershell"
						},
						"4": {
							"name": "comment.line.powershell"
						}
					},
					"comment": "These are special constants.",
					"match": "((\\$)(?i:(:?(?:False|Null|True)))\\b)((#).*$\\n?)?"
				},
				{
					"captures": {
						"1": {
							"name": "variable.language.builtin.powershell"
						},
						"2": {
							"name": "punctuation.definition.variable.powershell"
						},
						"4": {
							"name": "variable.other.member.powershell"
						},
						"6": {
							"name": "punctuation.definition.comment.powershell"
						},
						"5": {
							"name": "comment.line.powershell"
						}
					},
					"comment": "These are the other built-in constants.",
					"match": "((\\$)(?i:(:?(?:Error|ExecutionContext|Host|Home|PID|PsHome|PsVersionTable|ShellID)))((?:(?:\\.|::)(?:\\p{L}|\\d|_)+)*\\b)?\\b)((#).*$\\n?)?"
				},
				{
					"captures": {
						"1": {
							"name": "variable.language.builtin.powershell"
						},
						"2": {
							"name": "punctuation.definition.variable.powershell"
						},
						"4": {
							"name": "variable.other.member.powershell"
						},
						"6": {
							"name": "punctuation.definition.comment.powershell"
						},
						"5": {
							"name": "comment.line.powershell"
						}
					},
					"match": "((\\$)(?i:((?:[$^?])|:\\?|:?(?:_|Args|ConsoleFileName|Event|EventArgs|EventSubscriber|ForEach|Input|LastExitCode|Matches|MyInvocation|NestedPromptLevel|Profile|PSBoundParameters|PsCmdlet|PsCulture|PSDebugContext|PSItem|PSCommandPath|PSScriptRoot|PsUICulture|Pwd|Sender|SourceArgs|SourceEventArgs|StackTrace|Switch|This)\\b))((?:(?:\\.|::)(?:\\p{L}|\\d|_)+)*\\b)?)((#).*$\\n?)?"
				},
				{
					"captures": {
						"1": {
							"name": "variable.language.powershell"
						},
						"2": {
							"name": "punctuation.definition.variable.powershell"
						},
						"4": {
							"name": "variable.other.member.powershell"
						},
						"6": {
							"name": "punctuation.definition.comment.powershell"
						},
						"5": {
							"name": "comment.line.powershell"
						}
					},
					"comment": "Style preference variables as language variables so that they stand out.",
					"match": "((\\$)(?i:(:?(?:ConfirmPreference|DebugPreference|ErrorActionPreference|ErrorView|FormatEnumerationLimit|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount|MaximumHistoryCount|MaximumVariableCount|OFS|OutputEncoding|ProgressPreference|PsCulture|PSDebugContext|PSDefaultParameterValues|PSEmailServer|PSItem|PSModuleAutoloadingPreference|PSSenderInfo|PSSessionApplicationName|PSSessionConfigurationName|PSSessionOption|VerbosePreference|WarningPreference|WhatIfPreference)))((?:(?:\\.|::)(?:\\p{L}|\\d|_)+)*\\b)?\\b)((#).*$\\n?)?"
				},
				{
					"captures": {
						"1": {
							"name": "variable.other.readwrite.powershell"
						},
						"2": {
							"name": "punctuation.definition.variable.powershell"
						},
						"3": {
							"name": "storage.modifier.scope.powershell"
						},
						"4": {
							"name": "support.variable.drive.powershell"
						},
						"6": {
							"name": "variable.other.member.powershell"
						},
						"8": {
							"name": "punctuation.definition.comment.powershell"
						},
						"7": {
							"name": "comment.line.powershell"
						}
					},
					"match": "((?i:(\\$)(?:(?:(global|local|private|script|using|workflow):|((?:\\p{L}|\\d|_)+:|:))(?!:))?+((?:\\p{L}|\\d|[_?]|:(?!:))+))((?:(?:\\.|::)(?:\\p{L}|\\d|_)+)*\\b)?)((#).*$\\n?)?"
				},
				{
					"captures": {
						"1": {
							"name": "variable.other.readwrite.powershell"
						},
						"2": {
							"name": "punctuation.definition.variable.powershell"
						},
						"3": {
							"name": "storage.modifier.scope.powershell"
						},
						"4": {
							"name": "support.variable.drive.powershell"
						}
					},
					"comment": "splatting cannot have members and certain characters following, including no line comment",
					"match": "((?i:(\\@)(?:(?:(global|local|private|script|using|workflow):|((?:\\p{L}|\\d|_)+:|:))(?!:))?+((?:\\p{L}|\\d|[_?]|:(?!:))++)))(?![~`!@#$%^*<>\\]\\\\/+-])"
				},
				{
					"captures": {
						"1": {
							"name": "variable.other.readwrite.powershell"
						},
						"2": {
							"name": "punctuation.definition.variable.powershell"
						},
						"3": {
							"name": "punctuation.definition.variable.braces.begin.powershell"
						},
						"4": {
							"name": "storage.modifier.scope.powershell"
						},
						"5": {
							"name": "support.variable.drive.powershell"
						},
						"7": {
							"name": "punctuation.definition.variable.braces.end.powershell"
						},
						"8": {
							"name": "variable.other.member.powershell"
						},
						"10": {
							"name": "punctuation.definition.comment.powershell"
						},
						"9": {
							"name": "comment.line.powershell"
						}
					},
					"match": "((?i:(\\$)(\\{)(?:(?:(global|local|private|script|using|workflow):|((?:[^`{}:]|`[`{}]?)+:|:)))?+([^`{}]|`[`{}]?)+(\\}))((?:(?:\\.|::)(?:\\p{L}|\\d|_)+)*\\b)?)((#).*$\\n?)?"
				}
			]
		},
		"UsingDirective": {
			"match": "(?<!\\w)(?i:(using))\\s+(?i:(namespace|module))\\s+(?i:((?:\\w+(?:\\.)?)+))",
			"captures": {
				"1": {
					"name": "keyword.control.using.powershell"
				},
				"2": {
					"name": "keyword.other.powershell"
				},
				"3": {
					"name": "variable.parameter.powershell"
				}
			}
		},
		"RequiresDirective": {
			"begin": "(?<=#)(?i:(requires))\\s",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.requires.powershell"
				}
			},
			"end": "$",
			"name": "meta.requires.powershell",
			"patterns": [
				{
					"match": "\\-(?i:Modules|PSSnapin|RunAsAdministrator|ShellId|Version)",
					"name": "keyword.other.powershell"
				},
				{
					"match": "(?<!-)\\b\\p{L}+|\\d+(?:\\.\\d+)*",
					"name": "variable.parameter.powershell"
				},
				{
					"include": "#hashtable"
				}
			]
		},
		"variableNoProperty": {
			"patterns": [
				{
					"captures": {
						"0": {
							"name": "constant.language.powershell"
						},
						"1": {
							"name": "punctuation.definition.variable.powershell"
						}
					},
					"name": "meta.embedded.interpolated.powershell",
					"comment": "These are special constants.",
					"match": "(\\$)(?i:(:?(?:False|Null|True)))\\b"
				},
				{
					"captures": {
						"0": {
							"name": "variable.language.builtin.powershell"
						},
						"1": {
							"name": "punctuation.definition.variable.powershell"
						}
					},
					"name": "meta.embedded.interpolated.powershell",
					"match": "(\\$)(?i:(:?(?:Error|ExecutionContext|Host|Home|PID|PsHome|PsVersionTable|ShellID)))\\b"
				},
				{
					"captures": {
						"0": {
							"name": "variable.language.builtin.powershell"
						},
						"1": {
							"name": "punctuation.definition.variable.powershell"
						}
					},
					"name": "meta.embedded.interpolated.powershell",
					"comment": "Automatic variables are not constants, but they are read-only...",
					"match": "(\\$)(?i:((?:[$^?])|:\\?|:?(?:_|Args|ConsoleFileName|Event|EventArgs|EventSubscriber|ForEach|Input|LastExitCode|Matches|MyInvocation|NestedPromptLevel|Profile|PSBoundParameters|PsCmdlet|PsCulture|PSDebugContext|PSItem|PSCommandPath|PSScriptRoot|PsUICulture|Pwd|Sender|SourceArgs|SourceEventArgs|StackTrace|Switch|This)\\b))"
				},
				{
					"captures": {
						"0": {
							"name": "variable.language.builtin.powershell"
						},
						"1": {
							"name": "punctuation.definition.variable.powershell"
						}
					},
					"name": "meta.embedded.interpolated.powershell",
					"comment": "Style preference variables as language variables so that they stand out.",
					"match": "(\\$)(?i:(:?(?:ConfirmPreference|DebugPreference|ErrorActionPreference|ErrorView|FormatEnumerationLimit|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount|MaximumHistoryCount|MaximumVariableCount|OFS|OutputEncoding|ProgressPreference|PsCulture|PSDebugContext|PSDefaultParameterValues|PSEmailServer|PSItem|PSModuleAutoloadingPreference|PSSenderInfo|PSSessionApplicationName|PSSessionConfigurationName|PSSessionOption|VerbosePreference|WarningPreference|WhatIfPreference)))\\b"
				},
				{
					"captures": {
						"0": {
							"name": "variable.other.readwrite.powershell"
						},
						"1": {
							"name": "punctuation.definition.variable.powershell"
						},
						"2": {
							"name": "storage.modifier.scope.powershell"
						},
						"3": {
							"name": "support.variable.drive.powershell"
						}
					},
					"name": "meta.embedded.interpolated.powershell",
					"match": "(?i:(\\$)(?:(?:(global|local|private|script|using|workflow):|((?:\\p{L}|\\d|_)+:|:))(?!:))?+((?:\\p{L}|\\d|[_?]|:(?!:))+))"
				},
				{
					"captures": {
						"0": {
							"name": "variable.other.readwrite.powershell"
						},
						"1": {
							"name": "punctuation.definition.variable.powershell"
						},
						"2": {
							"name": "punctuation.section.braces.begin.powershell"
						},
						"3": {
							"name": "storage.modifier.scope.powershell"
						},
						"4": {
							"name": "support.variable.drive.powershell"
						},
						"6": {
							"name": "punctuation.section.braces.end.powershell"
						}
					},
					"name": "meta.embedded.interpolated.powershell",
					"match": "(?i:(\\$)(\\{)(?:(?:(global|local|private|script|using|workflow):|((?:[^`{}:]|`[`{}]?)+:|:)))?+([^`{}]|`[`{}]?)+(\\}))"
				}
			]
		},
		"hashtable": {
			"begin": "(@)(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.hashtable.begin.powershell"
				},
				"2": {
					"name": "punctuation.section.braces.begin.powershell"
				}
			},
			"end": "(\\})((?:(?:\\.|::)(?:\\p{L}|\\d|_)+)*\\b)?((#).*$\\n?)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.braces.end.powershell"
				},
				"2": {
					"name": "variable.other.member.powershell"
				},
				"4": {
					"name": "punctuation.definition.comment.powershell"
				},
				"3": {
					"name": "comment.line.powershell"
				}
			},
			"name": "meta.hashtable.powershell",
			"patterns": [
				{
					"match": "\\b(\\w+)(?=\\s*=)",
					"name": "variable.other.property.powershell"
				},
				{
					"comment": "#scriptblock"
				},
				{
					"include": "$self"
				}
			]
		},
		"doubleQuotedString": {
			"begin": "(?:[\"\\x{201C}-\\x{201E}])",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.powershell"
				}
			},
			"end": "(?:[\"\\x{201C}-\\x{201E}])",
			"applyEndPatternLast": true,
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.powershell"
				}
			},
			"name": "string.quoted.double.powershell",
			"patterns": [
				{
					"comment": "(?i)\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,64}\\b"
				},
				{
					"include": "#variableNoProperty"
				},
				{
					"include": "#doubleQuotedStringEscapes"
				},
				{
					"include": "#stringInterpolation"
				},
				{
					"match": "`\\s*$",
					"name": "keyword.other.powershell"
				}
			]
		}
	}
}
